// <auto-generated />
using System;
using BOOK_STORE_PORTAL_Project_.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BOOK_STORE_PORTAL_Project_.Migrations
{
    [DbContext(typeof(BookStorePortalDbContext))]
    [Migration("20241118161542_initial setup")]
    partial class initialsetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Author", b =>
                {
                    b.Property<int>("AuId")
                        .HasColumnType("int")
                        .HasColumnName("au_id");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("AuFname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("au_fname");

                    b.Property<string>("AuLname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("au_lname");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Contract")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("contract");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("zip");

                    b.HasKey("AuId");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Discount", b =>
                {
                    b.Property<string>("Dicounttype")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("dicounttype");

                    b.Property<decimal?>("Discount1")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("discount");

                    b.Property<int?>("Highqty")
                        .HasColumnType("int")
                        .HasColumnName("highqty");

                    b.Property<int?>("Lowqty")
                        .HasColumnType("int")
                        .HasColumnName("lowqty");

                    b.Property<int?>("StorId")
                        .HasColumnType("int")
                        .HasColumnName("stor_id");

                    b.HasIndex("StorId");

                    b.ToTable("discounts", (string)null);
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("emp_id");

                    b.Property<string>("Fname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fname");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("hire_date");

                    b.Property<int?>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<string>("JobLvl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("job_lvl");

                    b.Property<string>("Lname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lname");

                    b.Property<string>("Minit")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("minit");

                    b.Property<int?>("PubId")
                        .HasColumnType("int")
                        .HasColumnName("pub_id");

                    b.HasKey("EmpId");

                    b.HasIndex("JobId");

                    b.HasIndex("PubId");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<string>("JobDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("job_desc");

                    b.Property<string>("MaxLvl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("max_lvl");

                    b.Property<string>("MinLvl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("min_lvl");

                    b.HasKey("JobId");

                    b.ToTable("jobs", (string)null);
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.PubInfo", b =>
                {
                    b.Property<string>("Logo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("logo");

                    b.Property<string>("PrInfo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pr_info");

                    b.Property<int?>("PubId")
                        .HasColumnType("int")
                        .HasColumnName("pub_id");

                    b.HasIndex("PubId");

                    b.ToTable("pub_info", (string)null);
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Publisher", b =>
                {
                    b.Property<int>("PubId")
                        .HasColumnType("int")
                        .HasColumnName("pub_id");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<string>("PubName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("pub_name");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state");

                    b.HasKey("PubId");

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Roysched", b =>
                {
                    b.Property<decimal?>("Hirange")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("hirange");

                    b.Property<decimal?>("Lorange")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("lorange");

                    b.Property<decimal?>("Royalty")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("royalty");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int")
                        .HasColumnName("title_id");

                    b.HasIndex("TitleId");

                    b.ToTable("roysched", (string)null);
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Sale", b =>
                {
                    b.Property<int>("OrdNum")
                        .HasColumnType("int")
                        .HasColumnName("ord_num");

                    b.Property<DateTime?>("OrdDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ord_date");

                    b.Property<string>("Payterms")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payterms");

                    b.Property<int?>("Qty")
                        .HasColumnType("int")
                        .HasColumnName("qty");

                    b.Property<int?>("StorId")
                        .HasColumnType("int")
                        .HasColumnName("stor_id");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int")
                        .HasColumnName("title_id");

                    b.HasKey("OrdNum");

                    b.HasIndex("StorId");

                    b.HasIndex("TitleId");

                    b.ToTable("sales", (string)null);
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Store", b =>
                {
                    b.Property<int>("StorId")
                        .HasColumnType("int")
                        .HasColumnName("stor_id");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state");

                    b.Property<string>("StorAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("stor_address");

                    b.Property<string>("StorName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("stor_name");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("zip");

                    b.HasKey("StorId");

                    b.ToTable("stores", (string)null);
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Title", b =>
                {
                    b.Property<int>("TitleId")
                        .HasColumnType("int")
                        .HasColumnName("title_id");

                    b.Property<decimal?>("Advance")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("advance");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("notes");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("price");

                    b.Property<int?>("PubId")
                        .HasColumnType("int")
                        .HasColumnName("pub_id");

                    b.Property<DateTime?>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<decimal?>("Royalty")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("royalty");

                    b.Property<string>("Title1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<decimal?>("YtdSales")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("ytd_sales");

                    b.HasKey("TitleId");

                    b.ToTable("titles", (string)null);
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Titleauthor", b =>
                {
                    b.Property<int?>("AuId")
                        .HasColumnType("int")
                        .HasColumnName("au_id");

                    b.Property<string>("AuOrd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("au_ord");

                    b.Property<string>("Royaltyper")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("royaltyper");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int")
                        .HasColumnName("title_id");

                    b.HasIndex("AuId");

                    b.HasIndex("TitleId");

                    b.ToTable("titleauthor", (string)null);
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Discount", b =>
                {
                    b.HasOne("BOOK_STORE_PORTAL_Project_.Models.Store", "Stor")
                        .WithMany()
                        .HasForeignKey("StorId")
                        .HasConstraintName("FK_discounts_stores");

                    b.Navigation("Stor");
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Employee", b =>
                {
                    b.HasOne("BOOK_STORE_PORTAL_Project_.Models.Job", "Job")
                        .WithMany("Employees")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_employee_jobs");

                    b.HasOne("BOOK_STORE_PORTAL_Project_.Models.Publisher", "Pub")
                        .WithMany("Employees")
                        .HasForeignKey("PubId")
                        .HasConstraintName("FK_employee_publishers");

                    b.Navigation("Job");

                    b.Navigation("Pub");
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.PubInfo", b =>
                {
                    b.HasOne("BOOK_STORE_PORTAL_Project_.Models.Publisher", "Pub")
                        .WithMany()
                        .HasForeignKey("PubId")
                        .HasConstraintName("FK_pub_info_publishers");

                    b.Navigation("Pub");
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Roysched", b =>
                {
                    b.HasOne("BOOK_STORE_PORTAL_Project_.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_roysched_titles");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Sale", b =>
                {
                    b.HasOne("BOOK_STORE_PORTAL_Project_.Models.Store", "Stor")
                        .WithMany("Sales")
                        .HasForeignKey("StorId")
                        .HasConstraintName("FK_sales_stores");

                    b.HasOne("BOOK_STORE_PORTAL_Project_.Models.Title", "Title")
                        .WithMany("Sales")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_sales_titles");

                    b.Navigation("Stor");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Titleauthor", b =>
                {
                    b.HasOne("BOOK_STORE_PORTAL_Project_.Models.Author", "Au")
                        .WithMany()
                        .HasForeignKey("AuId")
                        .HasConstraintName("FK_titleauthor_authors");

                    b.HasOne("BOOK_STORE_PORTAL_Project_.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_titleauthor_titles");

                    b.Navigation("Au");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Job", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Publisher", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Store", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("BOOK_STORE_PORTAL_Project_.Models.Title", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
